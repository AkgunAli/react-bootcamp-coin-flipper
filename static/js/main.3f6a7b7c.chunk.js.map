{"version":3,"sources":["1-lira-tura.png","1-lira-yazi.png","components/Coin.js","components/CoinFlipper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Coin","props","currentStatus","donuyor","className","src","CoinTura","CoinYazi","options","CoinFlipper","atisYap","setState","arr","rastgeleEleman","Math","floor","random","length","setTimeout","gelenler","state","this","turageldi","filter","item","yazigeldi","Button","onClick","color","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,mSCuB5BC,EAlBF,SAACC,GACuBA,EAA1BC,cAA0BD,EAAXE,QACtB,OACI,yBAAKC,UAAU,kBACX,yBAAKA,UAAS,eAAUH,EAAME,SAAW,gBACrC,yBAAKE,IAAKC,IACLF,UAC4B,SAAxBH,EAAMC,cAA2B,YAAa,eAGvD,yBAAKG,IAAKE,IAAUH,UACY,SAAxBH,EAAMC,cAA2B,aAAc,iB,QCXjEM,EAAU,CAAC,YAAQ,QAsFVC,E,kDA7EX,WAAYR,GAAO,IAAD,8BACd,cAAMA,IAeVS,QAAU,WACN,EAAKC,SAAS,CACVR,SAAS,IAEb,IA3BoBS,EA2BdC,GA3BcD,EA2BsBJ,GA1B5BM,KAAKC,MAAMD,KAAKE,SAAWJ,EAAIK,SA2B7CC,YAAW,WACP,EAAKP,SAAS,CACVT,cAAeW,EACfM,SAAS,GAAD,mBAAM,EAAKC,MAAMD,UAAjB,CAA2BN,IACnCV,SAAS,MAGd,MA1BH,EAAKiB,MAAQ,CACTlB,cAAeM,EAAQ,GACvBW,SAAU,GACVhB,SAAS,GALC,E,qDAkCR,IAAD,EACsCkB,KAAKD,MAAzClB,EADF,EACEA,cAAeC,EADjB,EACiBA,QAASgB,EAD1B,EAC0BA,SAKzBG,EADaH,EAASI,QAAO,SAAAC,GAAI,MAAY,SAARA,KACfP,OAItBQ,EAFYN,EAASI,QAAO,SAAAC,GAAI,MAAY,cAARA,KAEbP,OAE7B,OACI,6BACI,4CACa,6BADb,qBAIA,kBAAC,EAAD,CAAMf,cAAeA,EAAeC,QAASA,IAC7C,6BACA,kBAACuB,EAAA,EAAD,CAAQC,QAASN,KAAKX,QAASkB,MAAM,UAArC,kBAGIT,EAASF,OAAS,IAAMd,GAAW,4BAAKD,EAAL,WAEvC,6BACA,0EACqCiB,EAASF,QAE9C,0EACqCK,GAErC,+EACqCG,Q,GApE3BI,aCDXC,MARf,WACE,OACE,yBAAK1B,UAAU,OACX,kBAAC,EAAD,QCKY2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3f6a7b7c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1-lira-tura.7c42669a.png\";","module.exports = __webpack_public_path__ + \"static/media/1-lira-yazi.9b70882e.png\";","import React from 'react';\r\nimport \"./CoinStyles.css\";\r\nimport CoinTura from \"../1-lira-tura.png\";\r\nimport CoinYazi from \"../1-lira-yazi.png\";\r\n\r\nconst Coin = (props) => {\r\n    const {currentStatus, donuyor} = props;\r\n    return (\r\n        <div className=\"Coin-container\">\r\n            <div className={`Coin ${props.donuyor && \"Coin-rotate\"}`}>\r\n                <img src={CoinTura}\r\n                     className={\r\n                         props.currentStatus === \"yazi\" ? \"Coin-back\": \"Coin-front\"\r\n                     }\r\n                />\r\n                <img src={CoinYazi} className={\r\n                        props.currentStatus === \"yazi\" ? \"Coin-front\": \"Coin-back\"\r\n                } />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Coin;","import React, {Component} from 'react';\r\nimport \"./CoinFlipperStyles.css\";\r\nimport Coin from \"./Coin\";\r\nimport { Button } from 'reactstrap';\r\n\r\nconst options = [\"Yazı\", \"Tura\" ];\r\n\r\nconst getRandomElFromArr = (arr) => {\r\n  const randomIndex = Math.floor(Math.random() * arr.length);\r\n  const randomItem =  arr[randomIndex];\r\n  return randomItem;\r\n};\r\n\r\nclass CoinFlipper extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            currentStatus: options[0],\r\n            gelenler: [],\r\n            donuyor: false,\r\n            \r\n        }\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n    \r\n\r\n    atisYap = () => {\r\n        this.setState({\r\n            donuyor: true\r\n        });\r\n        const rastgeleEleman = getRandomElFromArr(options);\r\n        setTimeout(() => {\r\n            this.setState({\r\n                currentStatus: rastgeleEleman,\r\n                gelenler: [...this.state.gelenler, rastgeleEleman],\r\n                donuyor: false\r\n                \r\n            })\r\n        }, 1000);\r\n    }\r\n\r\n \r\n\r\n\r\n    render() {\r\n        const {currentStatus, donuyor, gelenler} = this.state;\r\n    \r\n    \r\n    \r\n        const turagelsin = gelenler.filter(item => item ===\"Tura\");\r\n       const  turageldi= turagelsin.length;\r\n\r\n       const yazigelsin = gelenler.filter(item => item ===\"Yazı\");\r\n       \r\n       const  yazigeldi = yazigelsin.length;\r\n\r\n        return (\r\n            <div>\r\n                <h1>\r\n                Coin Flipper <br/>\r\n                \" Head Or Tails \"\r\n                </h1>\r\n                <Coin currentStatus={currentStatus} donuyor={donuyor}/>\r\n                <br/>\r\n                <Button onClick={this.atisYap }color=\"danger\">ATIŞ YAP!</Button>\r\n\r\n                {\r\n                    gelenler.length > 0 && !donuyor && <h3>{currentStatus} geldi!</h3>\r\n                }\r\n                <br/>\r\n                <h4>\r\n                        Toplam Atılan Para Sayısı : {gelenler.length}\r\n                </h4>\r\n                <h4>\r\n                        Toplam Atılan Tura Sayısı : {turageldi}\r\n                </h4>\r\n                <h4>\r\n                        Toplam Atılan Yazı Sayısı : {yazigeldi}\r\n                </h4>\r\n\r\n\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CoinFlipper;","import React from 'react';\r\nimport './App.css';\r\nimport CoinFlipper from \"./components/CoinFlipper\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <CoinFlipper />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}